        -:    0:Source:s21_string_files/s21_trim.c
        -:    1:#include "s21_string.h"
        -:    2:
       10:    3:void *s21_trim(const char *src, const char *trim_chars) {
       10:    4:  if (src == S21_NULL) return S21_NULL;
        -:    5:  char trim_chars_tmp[512];
        8:    6:  if (trim_chars != NULL && s21_strlen(trim_chars) != 0) {
        4:    7:    s21_strcpy(trim_chars_tmp, trim_chars);
        -:    8:  } else {
        4:    9:    s21_strcpy(trim_chars_tmp, "\t\n\v\r\f ");
        -:   10:  };
        8:   11:  s21_size_t src_len = s21_strlen(src);
        8:   12:  char *str_new = (char *)malloc(sizeof(char) * (src_len + 1));
        8:   13:  s21_size_t ind_bgn = s21_strspn(src, trim_chars_tmp);
        8:   14:  s21_size_t ind_end = src_len;
        -:   15:
        8:   16:  char *src_tmp = (char *)src + ind_end;
        8:   17:  char *src_end = src_tmp;
        -:   18:
       15:   19:  while (src_tmp == src_end) {
       15:   20:    src_tmp--;
       15:   21:    src_end = s21_strpbrk(src_tmp, trim_chars_tmp);
       15:   22:    if (src_end == NULL) src_end = src_tmp + 1;
       15:   23:    if (src_tmp != src_end) break;
        -:   24:  };
        -:   25:
        8:   26:  if (ind_end != ind_bgn) ind_end = src_tmp - src;
        -:   27:
        8:   28:  int i = 0;
       53:   29:  while (ind_bgn <= ind_end) {
       45:   30:    *(str_new + i) = src[ind_bgn];
       45:   31:    ind_bgn++;
       45:   32:    i++;
        -:   33:  };
        8:   34:  if (src_len > 1) {
        6:   35:    *(str_new + i) = '\0';
        -:   36:  } else {
        2:   37:    *str_new = '\0';
        -:   38:  }
        -:   39:
        8:   40:  return (void *)str_new;
        -:   41:}
