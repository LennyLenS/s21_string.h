        -:    0:Source:s21_sprintf.c
        -:    1:#include "s21_sprintf.h"
        -:    2:
        -:    3:#include "s21_string_files/s21_string.h"
        -:    4:
      336:    5:int s21_sprintf(char *str, const char *format, ...) {
      336:    6:  int result = 0;
        -:    7:  va_list args;            // указатель на аргументы
      336:    8:  va_start(args, format);  // выделение памяти для arg
      336:    9:  result = s21_parser(str, format, args);
      336:   10:  va_end(args);  // очищение памяти
      336:   11:  return result;
        -:   12:}
        -:   13:
      336:   14:int s21_parser(char *str, const char *format, va_list args) {
      336:   15:  str[0] = '\0';
      336:   16:  int i = -1;
      336:   17:  int counter_symbols_str = 0;
     6794:   18:  while (format[++i] != '\0') {
     6458:   19:    if (format[i] != '%') {
     5348:   20:      str[counter_symbols_str] = format[i];
     5348:   21:      counter_symbols_str++;
        -:   22:    }
     6458:   23:    if (format[i] == '%') {
     1110:   24:      Prototype prot = {'\0', 0, 0, 0, 0, 0, 0, 0, -1, -1, '\0'};
        -:   25:      // обработка спецификатора и его параметров
     1110:   26:      i = s21_read_format(&prot, format, i, args);
     1110:   27:      if (prot.spec == '%') {
        5:   28:        str[counter_symbols_str] = format[i];
        5:   29:        counter_symbols_str++;
        5:   30:        continue;
        -:   31:      }
        -:   32:      // printf("prev sprintf - %s\n", str);
        -:   33:      counter_symbols_str =
     1105:   34:          s21_args_to_str(counter_symbols_str, str, &prot, args);
        -:   35:      // printf("sprintf - %s\n", str);
        -:   36:    }
        -:   37:  }
      336:   38:  str[counter_symbols_str] = '\0';
      336:   39:  return counter_symbols_str;
        -:   40:}
