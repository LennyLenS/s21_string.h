        -:    0:Source:s21_read_format.c
        -:    1:#include "s21_sprintf.h"
        -:    2:
     1110:    3:int s21_read_format(Prototype *prot, const char *format, int i, va_list args) {
     1110:    4:  int this_is_width = 0;
     1110:    5:  int this_is_prec = 0;
     1110:    6:  i++;
     2721:    7:  while (format[i]) {
     2721:    8:    s21_check_flags(format, i, prot, &this_is_prec, &this_is_width);
     2721:    9:    s21_check_width(format, i, &this_is_width, prot, args);
     2721:   10:    i = s21_check_prec(format, i, &this_is_prec, prot, args);
     2721:   11:    if (format[i] == 'h') {
       15:   12:      prot->length = format[i];
     2706:   13:    } else if (format[i] == 'l') {
       23:   14:      prot->length = format[i];
     2683:   15:    } else if (format[i] == 'L') {
       95:   16:      prot->length = format[i];
        -:   17:    }
        -:   18:    // Check spec
     2721:   19:    if (format[i] == 'c' || format[i] == 'd' || format[i] == 'i' ||
     2464:   20:        format[i] == 'e' || format[i] == 'E' || format[i] == 'f' ||
     2216:   21:        format[i] == 'g' || format[i] == 'G' || format[i] == 'o' ||
     2028:   22:        format[i] == 's' || format[i] == 'u' || format[i] == 'x' ||
     1758:   23:        format[i] == 'X' || format[i] == 'p' || format[i] == 'n' ||
     1616:   24:        format[i] == '%')
     1110:   25:      prot->spec = format[i];
     2721:   26:    if (prot->spec == format[i])
     1110:   27:      break;  // выходим нашелся спецификатор
        -:   28:    else
     1611:   29:      i++;  // продолжаем дальше обрабатывать прототип спецификатора
        -:   30:  }
     1110:   31:  return i;
        -:   32:}
        -:   33:
     2721:   34:int s21_check_prec(const char *format, int i, int *this_is_prec,
        -:   35:                   Prototype *prot, va_list args) {
     2721:   36:  if (format[i] == '.') {
      522:   37:    i++;
      522:   38:    if (s21_check_number(format, i) == true && *this_is_prec == 0) {
      321:   39:      prot->prec_number = s21_write_number(format, &i);
      321:   40:      *this_is_prec = 1;
      201:   41:    } else if (format[i] == '*' && *this_is_prec == 0) {
       17:   42:      prot->prec_star = va_arg(args, int);
       17:   43:      prot->prec_number = prot->prec_star;
       17:   44:      *this_is_prec = 1;
      184:   45:    } else if (*this_is_prec == 0)
      184:   46:      prot->prec_number = 0;
        -:   47:  }
     2721:   48:  return i;
        -:   49:}
        -:   50:
     2721:   51:void s21_check_width(const char *format, int i, int *this_is_width,
        -:   52:                     Prototype *prot, va_list args) {
     2721:   53:  if (prot->width_number == 0 && format[i] == '*' && *this_is_width == 0) {
       24:   54:    prot->width_star = va_arg(args, int);
       24:   55:    *this_is_width = 1;
        -:   56:  }
     2721:   57:  if (s21_check_number(format, i) == true && *this_is_width == 0) {
      542:   58:    prot->width_number = s21_write_number(format, &i);
      542:   59:    *this_is_width = 1;
        -:   60:  }
     2721:   61:}
        -:   62:
     2721:   63:void s21_check_flags(const char *format, int i, Prototype *prot,
        -:   64:                     int *this_is_prec, int *this_is_width) {
     2721:   65:  if (format[i] == '+') {
      135:   66:    prot->plus_flag = 1;
     2586:   67:  } else if (format[i] == '-') {
      159:   68:    prot->minus_flag = 1;
     2427:   69:  } else if (format[i] == ' ') {
      162:   70:    prot->space_flag = 1;
     2265:   71:  } else if (format[i] == '#') {
       88:   72:    prot->sharp_flag = 1;
     2177:   73:  } else if (format[i] == '0' && *this_is_prec == 0 && *this_is_width == 0) {
      144:   74:    prot->zero_flag = 1;
        -:   75:  }
     2721:   76:}
        -:   77:
     4525:   78:bool s21_check_number(const char *format, int i) {
     4525:   79:  bool result = false;
     4525:   80:  if (format[i] >= '0' && format[i] <= '9') result = true;
     4525:   81:  return result;
        -:   82:}
        -:   83:
      863:   84:int s21_write_number(const char *format, int *i) {
      863:   85:  int width = 0;
      863:   86:  width += format[*i] - '0';
      863:   87:  *i += 1;
     1282:   88:  while (s21_check_number(format, *i) == true) {
      419:   89:    width *= 10;
      419:   90:    width += format[*i] - '0';
      419:   91:    *i += 1;
        -:   92:  }
      863:   93:  return width;
        -:   94:}
