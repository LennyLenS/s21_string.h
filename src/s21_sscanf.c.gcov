        -:    0:Source:s21_sscanf.c
        -:    1:#include "s21_sscanf.h"
        -:    2:
        -:    3:int s21_read_format_scanf(Prototype *prot, const char *format, int i,
        -:    4:                          va_list args);
        -:    5:int s21_check_prec_scanf(const char *format, int i, int *this_is_prec,
        -:    6:                         Prototype *prot, va_list args);
        -:    7:void s21_check_width_scanf(const char *format, int i, int *this_is_width,
        -:    8:                           Prototype *prot);
        -:    9:void s21_check_flags_scanf(const char *format, int i, Prototype *prot,
        -:   10:                           int *this_is_prec, int *this_is_width);
        -:   11:bool s21_check_number_scanf(const char *format, int i);
        -:   12:int s21_write_number_scanf(const char *format, int *i);
        -:   13:
       53:   14:int s21_sscanf(const char *str, const char *format, ...) {
        -:   15:  char c;
       53:   16:  int records = 0;
        -:   17:  va_list args;
       53:   18:  va_start(args, format);
       53:   19:  int i = 0;
       53:   20:  int j = 0;
        -:   21:
      207:   22:  while ((c = format[i]) != '\0') {
      154:   23:    if (c != '%') {
       36:   24:      if (s21_strchr(SPACES, c) != NULL) {
       83:   25:        while (s21_strchr(SPACES, str[j]) != NULL) {
       48:   26:          j++;
        -:   27:        }
        1:   28:      } else if (str[j] == format[i]) {
        1:   29:        j++;
        -:   30:      } else {
    #####:   31:        exit(EXIT_FAILURE);
        -:   32:      };
       36:   33:      i++;
       40:   34:      continue;
        -:   35:    };
        -:   36:
      118:   37:    if (format[i + 1] == '%') {
        4:   38:      i++;
        4:   39:      if (str[j] == '%') {
        4:   40:        i++;
        4:   41:        j++;
        4:   42:        continue;
        -:   43:      } else {
    #####:   44:        exit(EXIT_FAILURE);
        -:   45:      }
        -:   46:    };
        -:   47:
      114:   48:    Prototype prot = {'\0', 0, 0, 0, 0, 0, 0, 0, -1, -1, '\0'};
      114:   49:    i = s21_read_format_scanf(&prot, format, i, args);
      114:   50:    int space_counter_for_n = 0;
      114:   51:    if (prot.spec != 'c') {
      140:   52:      while (s21_strchr(SPACES, str[j]) != NULL) {
       46:   53:        space_counter_for_n++;
       46:   54:        j++;
        -:   55:      }
        -:   56:    };
        -:   57:
      114:   58:    records +=
      114:   59:        s21_switch_scan_spec(&prot, format, str, &j, args, space_counter_for_n);
        -:   60:
      114:   61:    i++;
        -:   62:  };
       53:   63:  va_end(args);
       53:   64:  return records;
        -:   65:}
        -:   66:
      114:   67:int s21_switch_scan_spec(Prototype *prot, const char *format, const char *str,
        -:   68:                         int *j, va_list args, int space_counter_for_n) {
      114:   69:  int width_counter = 0;
      114:   70:  int write_count = 0;
      114:   71:  char buff_str[4096] = {'\0'};
      114:   72:  format++;
      114:   73:  if (prot->width_number > 0) {
       21:   74:    width_counter = prot->width_number;
        -:   75:  } else {
       93:   76:    width_counter = INT_MAX;
        -:   77:  }
      114:   78:  switch (prot->spec) {
       60:   79:    case 'd':
       60:   80:      write_count += scanf_spec_d(prot, str, buff_str, args, width_counter, j);
       60:   81:      *j += s21_strlen(buff_str);
       60:   82:      break;
        -:   83:
       20:   84:    case 'c':
       20:   85:      write_count += scanf_spec_c(prot, str, buff_str, args, j);
       20:   86:      *j += s21_strlen(buff_str);
       20:   87:      break;
        -:   88:
       26:   89:    case 's':
       26:   90:      write_count += scanf_spec_s(prot, str, args, buff_str, width_counter, j);
       26:   91:      *j += s21_strlen(buff_str);
        -:   92:
       26:   93:      break;
        -:   94:
        8:   95:    case 'n':
        8:   96:      scanf_spec_n(args, j, space_counter_for_n);
        8:   97:      break;
        -:   98:
    #####:   99:    default:
    #####:  100:      break;
        -:  101:  };
      114:  102:  return write_count;
        -:  103:}
        -:  104:
        8:  105:void scanf_spec_n(va_list args, int *j, int space_counter_for_n) {
        8:  106:  int *p_args = NULL;
        8:  107:  p_args = va_arg(args, int *);
        8:  108:  *p_args = *j - space_counter_for_n;
        8:  109:}
        -:  110:
       26:  111:int scanf_spec_s(Prototype *prot, const char *str, va_list args, char *buff_str,
        -:  112:                 int width_counter, int *j) {
       26:  113:  char *p_args = NULL;
       26:  114:  int k = 0;
       26:  115:  int ret = 1;
       26:  116:  if (prot->width_star != '*') p_args = va_arg(args, char *);
      146:  117:  while (k < width_counter && s21_strchr(SPACES, str[*j + k]) == NULL) {
      120:  118:    buff_str[k] = str[*j + k];
      120:  119:    if (prot->width_star != '*') *(p_args + k) = str[*j + k];
      120:  120:    k++;
        -:  121:  };
       26:  122:  if (prot->width_star == '*') ret = 0;
       26:  123:  return ret;
        -:  124:}
        -:  125:
       20:  126:int scanf_spec_c(Prototype *prot, const char *str, char *buff_str, va_list args,
        -:  127:                 int *j) {
       20:  128:  char *p_args = NULL;
       20:  129:  int k = 0;
        -:  130:
       20:  131:  if (prot->width_star != '*') p_args = va_arg(args, char *);
       20:  132:  if (prot->width_number <= 1) {
       20:  133:    buff_str[k] = str[*j + k];
       20:  134:    if (prot->width_star != '*') {
       19:  135:      *p_args = str[*j];
       19:  136:      k++;
        -:  137:    }
        -:  138:  } else {
    #####:  139:    while (k < prot->width_number) {
    #####:  140:      buff_str[k] = str[*j + k];
    #####:  141:      if (prot->width_star != '*') {
    #####:  142:        *(p_args + k) = str[*j + k];
    #####:  143:        k++;
        -:  144:      }
        -:  145:    };
        -:  146:  };
       20:  147:  return k;
        -:  148:}
        -:  149:
       60:  150:int scanf_spec_d(Prototype *prot, const char *str, char *buff_str, va_list args,
        -:  151:                 int width_counter, int *j) {
       60:  152:  void *p_args = NULL;
       60:  153:  int k = 0;
       60:  154:  int write_count = 0;
       60:  155:  long long int numb = 0;
       60:  156:  if (prot->width_star != '*') p_args = va_arg(args, int *);
       60:  157:  if (str[*j + k] == '-' || str[*j + k] == '+') {
       19:  158:    buff_str[k] = str[*j + k];
       19:  159:    k++;
        -:  160:  };
      299:  161:  while (k < width_counter && s21_strchr(SPACES, str[*j + k]) == NULL) {
      247:  162:    if (isNumber(str[*j + k])) {
      239:  163:      buff_str[k] = str[*j + k];
        -:  164:    } else {
        8:  165:      if (k == 0) return -1;
        3:  166:      break;
        -:  167:    };
      239:  168:    k++;
        -:  169:  }
        -:  170:
       55:  171:  numb = s21_atoi(buff_str);
        -:  172:  if (prot->length == 'l' && numb > LONG_MAX) numb = LONG_MAX;
       55:  173:  if (prot->width_star != '*') {
       51:  174:    *(int *)p_args = numb;
       51:  175:    write_count = 1;
        -:  176:  };
       55:  177:  return write_count;
        -:  178:}
        -:  179:
       55:  180:long long int s21_atoi(char *str) {
       55:  181:  long long int res = 0;
       55:  182:  int i = 0;
       55:  183:  int sign = 0;
       55:  184:  if (str[i] == 45) {
       10:  185:    i++;
       10:  186:    sign = 1;
       45:  187:  } else if (str[i] == '+') {
        9:  188:    i++;
        -:  189:  };
      294:  190:  for (int k = i; str[k] != '\0'; k++) {
      239:  191:    res = res * 10;
      239:  192:    res = res + str[k] - '0';
        -:  193:  };
       55:  194:  if (sign == 1) res = res * (-1);
       55:  195:  return res;
        -:  196:}
        -:  197:
      247:  198:int isNumber(char c) {
      247:  199:  int res = 0;
      247:  200:  if (c > 47 && c < 58) res = 1;
      247:  201:  return res;
        -:  202:}
        -:  203:
      114:  204:int s21_read_format_scanf(Prototype *prot, const char *format, int i,
        -:  205:                          va_list args) {
      114:  206:  int this_is_width = 0;
      114:  207:  int this_is_prec = 0;
      114:  208:  i++;
      160:  209:  while (format[i]) {
      160:  210:    s21_check_flags_scanf(format, i, prot, &this_is_prec, &this_is_width);
      160:  211:    s21_check_width_scanf(format, i, &this_is_width, prot);
      160:  212:    i = s21_check_prec_scanf(format, i, &this_is_prec, prot, args);
      160:  213:    if (format[i] == 'h') {
        2:  214:      prot->length = format[i];
      158:  215:    } else if (format[i] == 'l') {
        8:  216:      prot->length = format[i];
      150:  217:    } else if (format[i] == 'L') {
    #####:  218:      prot->length = format[i];
        -:  219:    }
        -:  220:    // Check spec
      160:  221:    if (format[i] == 'c' || format[i] == 'd' || format[i] == 'i' ||
       80:  222:        format[i] == 'e' || format[i] == 'E' || format[i] == 'f' ||
       80:  223:        format[i] == 'g' || format[i] == 'G' || format[i] == 'o' ||
       80:  224:        format[i] == 's' || format[i] == 'u' || format[i] == 'x' ||
       54:  225:        format[i] == 'X' || format[i] == 'p' || format[i] == 'n' ||
       46:  226:        format[i] == '%')
      114:  227:      prot->spec = format[i];
      160:  228:    if (prot->spec == format[i])
      114:  229:      break;
        -:  230:    else
       46:  231:      i++;
        -:  232:  }
      114:  233:  return i;
        -:  234:}
        -:  235:
      160:  236:int s21_check_prec_scanf(const char *format, int i, int *this_is_prec,
        -:  237:                         Prototype *prot, va_list args) {
      160:  238:  if (format[i] == '.') {
    #####:  239:    i++;
    #####:  240:    if (s21_check_number_scanf(format, i) == true && *this_is_prec == 0) {
    #####:  241:      prot->prec_number = s21_write_number_scanf(format, &i);
    #####:  242:      *this_is_prec = 1;
    #####:  243:    } else if (format[i] == '*' && *this_is_prec == 0) {
    #####:  244:      prot->prec_star = va_arg(args, int);
    #####:  245:      *this_is_prec = 1;
        -:  246:    }
        -:  247:  }
      160:  248:  return i;
        -:  249:}
        -:  250:
      160:  251:void s21_check_width_scanf(const char *format, int i, int *this_is_width,
        -:  252:                           Prototype *prot) {
      160:  253:  if (s21_check_number_scanf(format, i) == true && *this_is_width == 0) {
       21:  254:    prot->width_number = s21_write_number_scanf(format, &i);
       21:  255:    *this_is_width = 1;
      139:  256:  } else if (prot->width_number == 0 && format[i] == '*' &&
       11:  257:             *this_is_width == 0) {
       11:  258:    prot->width_star = '*';
       11:  259:    *this_is_width = 1;
        -:  260:  }
      160:  261:}
        -:  262:
      160:  263:void s21_check_flags_scanf(const char *format, int i, Prototype *prot,
        -:  264:                           int *this_is_prec, int *this_is_width) {
      160:  265:  if (format[i] == '+') {
    #####:  266:    prot->plus_flag = 1;
      160:  267:  } else if (format[i] == '-') {
    #####:  268:    prot->minus_flag = 1;
      160:  269:  } else if (format[i] == ' ') {
    #####:  270:    prot->space_flag = 1;
      160:  271:  } else if (format[i] == '#') {
    #####:  272:    prot->sharp_flag = 1;
      160:  273:  } else if (format[i] == '0' && *this_is_prec == 0 && *this_is_width == 0) {
    #####:  274:    prot->zero_flag = 1;
        -:  275:  }
      160:  276:}
        -:  277:
      183:  278:bool s21_check_number_scanf(const char *format, int i) {
      183:  279:  bool result = false;
      183:  280:  if (format[i] >= '0' && format[i] <= '9') result = true;
      183:  281:  return result;
        -:  282:}
        -:  283:
       21:  284:int s21_write_number_scanf(const char *format, int *i) {
       21:  285:  int width = 0;
       21:  286:  width += format[*i] - '0';
       21:  287:  *i += 1;
       23:  288:  while (s21_check_number_scanf(format, *i) == true) {
        2:  289:    width *= 10;
        2:  290:    width += format[*i] - '0';
        2:  291:    *i += 1;
        -:  292:  }
       21:  293:  return width;
        -:  294:}
